@page "/"
@using BlazorEditor.Data
@using BlazorMonaco.Editor
@inject EditorService Service
<PageTitle>Editor</PageTitle>

<h1>Editor</h1>

<StandaloneCodeEditor Id="my-editor-instance-id"
                      ConstructionOptions="EditorConstructionOptions"
                      @ref="_editor"/>
<button @onclick="RunTestsAsync">Compile</button>

@if (tests == null) {
    @* <p><em>Loading...</em></p> *@
}
else {
    <table class="table">
        <thead>
            <tr>
                <th>Name</th>
                <th>Status</th>
                @* <th>Temp. (F)</th>
                <th>Summary</th> *@
            </tr>
        </thead>
        <tbody>
            @foreach (var test in tests)
            {
                <tr>
                    <td>@test.Name</td>
                    <td>@test.Success</td>
                    @* <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td> *@
                </tr>
            }
        </tbody>
    </table>
}

@code {
    [System.Diagnostics.CodeAnalysis.AllowNull]
    private StandaloneCodeEditor _editor;
    private MyMath.EditorTest[]? tests;

    protected override Task OnInitializedAsync()
    {
        return RunTestsAsync();
    }

    private async Task RunTestsAsync() {
        var implementation = _editor != null ? await _editor.GetValue() : Constants.INITIAL_IMPLEMENTATION;
        tests = await Service.RunTestsAsync(implementation);
    }

    private StandaloneEditorConstructionOptions EditorConstructionOptions(StandaloneCodeEditor editor) {
        return new StandaloneEditorConstructionOptions {
            AutomaticLayout = true,
            Language = "csharp",
            Value = Constants.INITIAL_IMPLEMENTATION,
            Theme = "vs-dark",
            Minimap = new EditorMinimapOptions { Enabled = false },
            LineNumbers = "off"
        };
    }
}
